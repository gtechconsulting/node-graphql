CREATE TABLE  IF NOT EXISTS audit_log (
  id INTEGER PRIMARY KEY generated by default as identity,
  log TEXT NOT NULL,
  created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO audit_log(id, log) VALUES
(1, 'First, solve the problem. Then, write the code.'),
(2, 'Any fool can write code that a computer can understand. Good programmers write code that humans can understand.'),
(3, 'If you stop learning, then the projects you work on are stuck in whatever time period you decided to settle.'),
(4, 'Bad programmers worry about the code. Good programmers worry about the data structures and their relationships.'),
(5, 'You should name a variable using the same care with which you name a first-born child.'),
(6, 'If you are born poor, it is not your mistake, but if you die poor it is your mistake.'),
(7, 'Debugging is like being the detective in a crime movie where you are also the murderer.'),
(8, 'An expert is a person who has made all the mistakes that can be made in a very narrow field.'),
(9, 'Some people, when confronted with a problem, think “I know, I’ll use regular expressions.” Now they have two problems.');



CREATE EXTENSION citext;
CREATE DOMAIN domain_email AS citext
CHECK(
   VALUE ~ '^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$'
);

CREATE TABLE IF NOT EXISTS badge (
    id INTEGER generated by default as identity,
    "description" TEXT NOT NULL,
    image_url TEXT NOT NULL,
    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS "user"(
    id INTEGER generated by default as identity,
    username TEXT,
    email domain_email,
    password TEXT NOT NULL,
    "name" TEXT NOT NULL,
    date_of_birth TEXT NOT null,
    gender TEXT check (gender in ('MALE', 'FEMALE', 'NON-BINARY')), 
    active bool NOT NULL DEFAULT true,
    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS club (
    id INTEGER generated by default as identity,
    "name" TEXT NOT NULL,
    street TEXT NOT NULL,
    neighborhood TEXT NOT NULL,
    "number" TEXT,
    reference_point TEXT,
    city TEXT NOT NULL,
    "state" TEXT NOT NULL,
    postal_code TEXT NOT NULL,
    phone_number TEXT NOT NULL,
    fax TEXT,
    email TEXT,
    website TEXT,
    social_media_url TEXT,
    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS user_detail (
    id INTEGER generated by default as identity,
    user_id INTEGER REFERENCES "user" (id),
    image_url TEXT,
    rewards_points INTEGER default 0,
    home_club_id INTEGER REFERENCES club (id),
    badge_id INTEGER REFERENCES badge (id),
    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS user_social_relationship (
    user_id INTEGER NOT NULL,
    user_following_id INTEGER NOT NULL,
    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

ALTER TABLE user_social_relationship ADD CONSTRAINT usersocialrelationshipuserfollowingid FOREIGN KEY (user_following_id) REFERENCES "user" (id);
ALTER TABLE user_social_relationship ADD CONSTRAINT usersocialrelationshipuserid FOREIGN KEY (user_id) REFERENCES "user" (id);

CREATE TABLE IF NOT EXISTS onboarding_questionnarie (
    id INTEGER generated by default as identity,
    game_type TEXT check (game_type in ('GOLF')), 
    question TEXT NOT NULL,
    question_type TEXT check (question_type in ('SLICE', 'SINGLE_SELECT', 'MULTIPLE_SELECT', 'MULTIPLE_TEXT', 'FREE_TEXT')),
    question_answer_option JSONB,
    active bool NOT NULL DEFAULT true,
    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS user_onboarding_answer (
    id INTEGER generated by default as identity,
    user_id INTEGER REFERENCES "user" (id),
    question_title TEXT NOT NULL,
    answer JSONB NOT NULL,
    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE IF NOT EXISTS activity (
    id INTEGER generated by default as identity,
    "description" TEXT NOT NULL,
    image_url TEXT NOT NULL,
    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS user_activity (
    user_id INTEGER NOT NULL,
    activity_id INTEGER NOT NULL,
    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

ALTER TABLE user_activity ADD CONSTRAINT useractivityuserid FOREIGN KEY (activity_id) REFERENCES activity (id);
ALTER TABLE user_activity ADD CONSTRAINT useractivityactivityid FOREIGN KEY (user_id) REFERENCES "user" (id);

CREATE TABLE IF NOT EXISTS achievement (
    id INTEGER generated by default as identity,
    "description" TEXT NOT NULL,
    image_url TEXT NOT NULL,
    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS user_achievement (
    user_id INTEGER NOT NULL,
    achievement_id INTEGER NOT NULL,
    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

ALTER TABLE user_achievement ADD CONSTRAINT userachievementuserid FOREIGN KEY (achievement_id) REFERENCES achievement (id);
ALTER TABLE user_achievement ADD CONSTRAINT userachievementachievementid FOREIGN KEY (user_id) REFERENCES "user" (id);

CREATE TABLE IF NOT EXISTS game_type (
    id INTEGER generated by default as identity,
    "description" TEXT NOT NULL,
    active bool NOT NULL DEFAULT true,
    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS game (
    id INTEGER generated by default as identity,
    "name" TEXT NOT NULL,
    "description" TEXT NOT NULL,
    user_id INTEGER REFERENCES "user" (id),
    course_id  INTEGER,
    club_id INTEGER REFERENCES club (id),
    game_type_id INTEGER REFERENCES game_type (id),
    max_players  INTEGER NOT NULL,
    game_status TEXT check (game_status in ('SCHEDULLED', 'PLAYING', 'FINISHED', 'CANCELLED')),
    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS game_results (
    id INTEGER generated by default as identity,
    game_id INTEGER REFERENCES game (id),
    score INTEGER NOT NULL,
    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS club_contact (
    id INTEGER generated by default as identity,
    "name" TEXT NOT NULL,
    title TEXT NOT NULL,
    club_id INTEGER REFERENCES club (id),
    phone_number TEXT,
    email TEXT,
    active bool NOT NULL DEFAULT true,
    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS club_location (
    id INTEGER generated by default as identity,
    club_id INTEGER REFERENCES club (id),
    latitude TEXT NOT NULL,
    longitude TEXT NOT NULL,
    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS club_event (
    id INTEGER generated by default as identity,
    title TEXT NOT NULL,
    "description" TEXT NOT NULL,
    club_id INTEGER REFERENCES club (id),
    start_date timestamp NOT NULL,
    start_time TEXT NOT NULL,
    end_date timestamp NOT NULL, 
    end_time TEXT NOT NULL,
    detail JSONB,
    active bool NOT NULL DEFAULT true,
    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS course (
    id INTEGER generated by default as identity,
    "name" TEXT NOT NULL,
    "description" TEXT NOT NULL,
    club_id INTEGER REFERENCES club (id),
    course_type TEXT NOT NULL,
    active bool NOT NULL DEFAULT true,
    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS course_detail (
    id INTEGER generated by default as identity,
    course_id INTEGER REFERENCES course (id),
    "data" JSONB,
    registration_fee TEXT NOT NULL,
    registration_type TEXT check (registration_type in ('FREE', 'PAYED'))
);

CREATE TABLE IF NOT EXISTS booking (
    id INTEGER generated by default as identity,
    user_id INTEGER REFERENCES "user" (id),
    course_id INTEGER REFERENCES course (id),
    payment_status TEXT check (payment_status in ('PENDING', 'APROVED', 'REPROVED', 'CANCELLED', 'EXPIRED')) DEFAULT 'PENDING',
    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE IF NOT EXISTS user_checkin (
    id INTEGER generated by default as identity,
    user_id INTEGER REFERENCES "user" (id),
    club_id INTEGER REFERENCES club (id),
    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS reward_transaction (
    id INTEGER generated by default as identity,
    user_id INTEGER REFERENCES "user" (id),
    transaction_type TEXT check (transaction_type in ('EARN', 'SPEND')),
    amount INTEGER NOT NULL,
    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);
